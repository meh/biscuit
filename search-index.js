var searchIndex={};
searchIndex["biscuit"] = {"doc":"Build Status Crates.io Repository Documentation dependency…","i":[[4,"ParseError","biscuit","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",0,null],[13,"IdnaError","","",0,null],[13,"InvalidPort","","",0,null],[13,"InvalidIpv4Address","","",0,null],[13,"InvalidIpv6Address","","",0,null],[13,"InvalidDomainCharacter","","",0,null],[13,"RelativeUrlWithoutBase","","",0,null],[13,"RelativeUrlWithCannotBeABaseBase","","",0,null],[13,"SetHostOnCannotBeABaseUrl","","",0,null],[13,"Overflow","","",0,null],[3,"Url","","A parsed URL record.",null,null],[3,"TemporalOptions","","Options for validating temporal claims",null,null],[12,"epsilon","","Allow for some leeway for clock drifts, limited to this…",1,null],[12,"now","","Specify a time to use in temporal validation instead of…",1,null],[3,"Empty","","An empty struct that derives Serialize and Deserialize.…",null,null],[3,"Base64Url","","A newtype wrapper around a string to indicate it's base64…",null,null],[3,"Compact","","A collection of `CompactPart`s that have been converted to…",null,null],[12,"parts","","Parts of the compact representation",2,null],[3,"Timestamp","","Wrapper around `DateTime<Utc>` to allow us to do custom…",null,null],[3,"RegisteredClaims","","Registered claims defined by RFC7519#4.1",null,null],[12,"issuer","","Token issuer. Serialized to `iss`.",3,null],[12,"subject","","Subject where the JWT is referring to. Serialized to `sub`",3,null],[12,"audience","","Audience intended for the JWT. Serialized to `aud`",3,null],[12,"expiry","","Expiration time in seconds since Unix Epoch. Serialized to…",3,null],[12,"not_before","","Not before time in seconds since Unix Epoch. Serialized to…",3,null],[12,"issued_at","","Issued at Time in seconds since Unix Epoch. Serialized to…",3,null],[12,"id","","Application specific JWT ID. Serialized to `jti`",3,null],[3,"ClaimPresenceOptions","","Options for claims presence validation",null,null],[12,"issued_at","","Whether the `iat` or `Issued At` field is required",4,null],[12,"not_before","","Whether the `nbf` or `Not Before` field is required",4,null],[12,"expiry","","Whether the `exp` or `Expiry` field is required",4,null],[12,"issuer","","Whether the `iss` or `Issuer` field is required",4,null],[12,"audience","","Whether the `aud` or `Audience` field is required",4,null],[12,"subject","","Whether the `sub` or `Subject` field is required",4,null],[12,"id","","Whether the `jti` or `JWT ID` field is required",4,null],[3,"ValidationOptions","","Options for claims validation",null,null],[12,"claim_presence_options","","Claims marked as required will trigger a validation…",5,null],[12,"temporal_options","","Define how to validate temporal claims",5,null],[12,"issued_at","","Validation options for `iat` or `Issued At` claim if…",5,null],[12,"not_before","","Validation options for `nbf` or `Not Before` claim if…",5,null],[12,"expiry","","Validation options for `exp` or `Expiry` claim if present",5,null],[12,"issuer","","Validation options for `iss` or `Issuer` claim if present…",5,null],[12,"audience","","Validation options for `aud` or `Audience` claim if…",5,null],[3,"ClaimsSet","","A collection of claims, both registered and your custom…",null,null],[12,"registered","","Registered claims defined by the RFC",6,null],[12,"private","","Application specific claims",6,null],[4,"Presence","","Defines whether a claim is required or not",null,null],[13,"Optional","","Claim is optional",7,null],[13,"Required","","Claim is required",7,null],[4,"Validation","","Defines whether a claim is validated or not",null,null],[13,"Ignored","","This claim is not validated",8,null],[13,"Validate","","Validate this claim with type T. Refer to…",8,null],[4,"SingleOrMultiple","","Represents a choice between a single value or multiple…",null,null],[13,"Single","","One single value",9,null],[13,"Multiple","","Multiple values",9,null],[4,"StringOrUri","","Represents a choice between a URI or an arbitrary string.…",null,null],[13,"String","","A generic string",10,null],[13,"Uri","","A parsed URI",10,null],[11,"map","","Map the value to another validation requirement, similar…",8,[[["f"]],["validation"]]],[0,"errors","","Errors returned will be converted to one of the structs in…",null,null],[4,"Error","biscuit::errors","All the errors we can encounter while signing/verifying…",null,null],[13,"GenericError","","A generic error which is described by the contained string",11,null],[13,"DecodeError","","Error returned from failed token decoding",11,null],[13,"ValidationError","","Error returned from failed token validation",11,null],[13,"JsonError","","Error during the serialization or deserialization of tokens",11,null],[13,"DecodeBase64","","Error during base64 encoding or decoding",11,null],[13,"Utf8","","Error when decoding bytes to UTF8 string",11,null],[13,"IOError","","Errors related to IO",11,null],[13,"UriParseError","","Errors related to URI parsing",11,null],[13,"KeyRejected","","Key was rejected by Ring",11,null],[13,"WrongKeyType","","Wrong key type was provided for the cryptographic operation",11,null],[12,"expected","biscuit::errors::Error","Expected type of key",12,null],[12,"actual","","Actual type of key",12,null],[13,"WrongEncryptionOptions","biscuit::errors","Wrong variant of `EncryptionOptions` was provided for the…",11,null],[12,"expected","biscuit::errors::Error","Expected variant of options",13,null],[12,"actual","","Actual variant of options",13,null],[13,"UnspecifiedCryptographicError","biscuit::errors","An unknown cryptographic error",11,null],[13,"UnsupportedOperation","","An unsupported or invalid operation",11,null],[4,"DecodeError","","Errors from decoding tokens",null,null],[13,"InvalidToken","","Token is invalid in structure or form",14,null],[13,"PartsLengthError","","The number of compact parts is incorrect",14,null],[12,"expected","biscuit::errors::DecodeError","Expected number of parts",15,null],[12,"actual","","Actual number of parts",15,null],[4,"ValidationError","biscuit::errors","Errors from validating tokens",null,null],[13,"InvalidSignature","","Token has an invalid signature (RFC7523 3.9)",16,null],[13,"WrongAlgorithmHeader","","Token provided was signed or encrypted with an unexpected…",16,null],[13,"MissingRequiredClaims","","A field required is missing from the token The parameter…",16,null],[13,"Expired","","The token's expiry has passed (exp check failled, RFC7523…",16,null],[13,"NotYetValid","","The token is not yet valid (nbf check failed, RFC7523 3.5)…",16,null],[13,"TooOld","","The token has been created too far in the past (iat check…",16,null],[13,"InvalidIssuer","","The token does not have or has the wrong issuer (iss check…",16,null],[13,"InvalidAudience","","The token does not have or has the wrong audience (aud…",16,null],[13,"KidMissing","","The token doesn't contains the Kid claim in the header",16,null],[13,"KeyNotFound","","The by the Kid specified key, wasn't found in the KeySet",16,null],[13,"UnsupportedKeyAlgorithm","","The algorithm of the JWK is not supported for validating…",16,null],[13,"MissingAlgorithm","","An algorithm is needed for verification but was not provided",16,null],[0,"jwa","biscuit","JSON Web Algorithms",null,null],[8,"SecureRandom","biscuit::jwa","A secure random number generator.",null,null],[10,"fill","","Fills `dest` with random bytes.",17,[[["self"]],[["result",["unspecified"]],["unspecified"]]]],[3,"EncryptionResult","","The result returned from an encryption operation",null,null],[12,"nonce","","The initialization vector, or nonce used in the encryption",18,null],[12,"encrypted","","The encrypted payload",18,null],[12,"tag","","The authentication tag",18,null],[12,"additional_data","","Additional authenticated data that is integrity protected…",18,null],[4,"EncryptionOptions","","Options to be passed in while performing an encryption…",null,null],[13,"None","","No options are required. Most algorithms do not require…",19,null],[13,"AES_GCM","","Options for AES GCM encryption.",19,null],[12,"nonce","biscuit::jwa::EncryptionOptions","Initialization vector, or nonce for the AES GCM…",20,null],[4,"Algorithm","biscuit::jwa","Algorithms described by RFC 7518. This enum is serialized…",null,null],[13,"Signature","","Algorithms meant for Digital signature or MACs See RFC7518#3",21,null],[13,"KeyManagement","","Algorithms meant for key management. The algorithms are…",21,null],[13,"ContentEncryption","","Algorithms meant for content encryption. See RFC7518#5",21,null],[4,"SignatureAlgorithm","","The algorithms supported for digital signature and MACs,…",null,null],[13,"None","","No encryption/signature is included for the JWT. During…",22,null],[13,"HS256","","HMAC using SHA-256",22,null],[13,"HS384","","HMAC using SHA-384",22,null],[13,"HS512","","HMAC using SHA-512",22,null],[13,"RS256","","RSASSA-PKCS1-v1_5 using SHA-256",22,null],[13,"RS384","","RSASSA-PKCS1-v1_5 using SHA-384",22,null],[13,"RS512","","RSASSA-PKCS1-v1_5 using SHA-512",22,null],[13,"ES256","","ECDSA using P-256 and SHA-256",22,null],[13,"ES384","","ECDSA using P-384 and SHA-384",22,null],[13,"ES512","","ECDSA using P-521 and SHA-512 -- This variant is…",22,null],[13,"PS256","","RSASSA-PSS using SHA-256 and MGF1 with SHA-256. The size…",22,null],[13,"PS384","","RSASSA-PSS using SHA-384 and MGF1 with SHA-384 The size of…",22,null],[13,"PS512","","RSASSA-PSS using SHA-512 and MGF1 with SHA-512 The size of…",22,null],[4,"KeyManagementAlgorithm","","Algorithms for key management as defined in RFC7518#4",null,null],[13,"RSA1_5","","RSAES-PKCS1-v1_5",23,null],[13,"RSA_OAEP","","RSAES OAEP using default parameters",23,null],[13,"RSA_OAEP_256","","RSAES OAEP using SHA-256 and MGF1 with SHA-256",23,null],[13,"A128KW","","AES Key Wrap using 128-bit key. Unsupported",23,null],[13,"A192KW","","AES Key Wrap using 192-bit key. Unsupported. This is not…",23,null],[13,"A256KW","","AES Key Wrap using 256-bit key. Unsupported",23,null],[13,"DirectSymmetricKey","","Direct use of a shared symmetric key",23,null],[13,"ECDH_ES","","ECDH-ES using Concat KDF",23,null],[13,"ECDH_ES_A128KW","","ECDH-ES using Concat KDF and \"A128KW\" wrapping",23,null],[13,"ECDH_ES_A192KW","","ECDH-ES using Concat KDF and \"A192KW\" wrapping",23,null],[13,"ECDH_ES_A256KW","","ECDH-ES using Concat KDF and \"A256KW\" wrapping",23,null],[13,"A128GCMKW","","Key wrapping with AES GCM using 128-bit key alg",23,null],[13,"A192GCMKW","","Key wrapping with AES GCM using 192-bit key alg. This is…",23,null],[13,"A256GCMKW","","Key wrapping with AES GCM using 256-bit key alg",23,null],[13,"PBES2_HS256_A128KW","","PBES2 with HMAC SHA-256 and \"A128KW\" wrapping",23,null],[13,"PBES2_HS384_A192KW","","PBES2 with HMAC SHA-384 and \"A192KW\" wrapping",23,null],[13,"PBES2_HS512_A256KW","","PBES2 with HMAC SHA-512 and \"A256KW\" wrapping",23,null],[4,"KeyManagementAlgorithmType","","Describes the type of operations that the key management…",null,null],[13,"SymmetricKeyWrapping","","Wraps a randomly generated CEK using a symmetric…",24,null],[13,"AsymmetricKeyEncryption","","Encrypt a randomly generated CEK using an asymmetric…",24,null],[13,"DirectKeyAgreement","","A key agreement algorithm to pick a CEK",24,null],[13,"KeyAgreementWithKeyWrapping","","A key agreement algorithm used to pick a symmetric CEK and…",24,null],[13,"DirectEncryption","","A user defined symmetric shared key is the CEK",24,null],[4,"ContentEncryptionAlgorithm","","Algorithms meant for content encryption. See RFC7518#5",null,null],[13,"A128CBC_HS256","","AES_128_CBC_HMAC_SHA_256 authenticated encryption…",25,null],[13,"A192CBC_HS384","","AES_192_CBC_HMAC_SHA_384 authenticated encryption…",25,null],[13,"A256CBC_HS512","","AES_256_CBC_HMAC_SHA_512 authenticated encryption…",25,null],[13,"A128GCM","","AES GCM using 128-bit key",25,null],[13,"A192GCM","","AES GCM using 192-bit key This is not supported by `ring`.",25,null],[13,"A256GCM","","AES GCM using 256-bit key",25,null],[11,"description","","Description of the type of key",19,[[["self"]],["str"]]],[11,"sign","","Take some bytes and sign it according to the algorithm and…",22,[[["secret"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[11,"verify","","Verify signature based on the algorithm and secret provided.",22,[[["secret"]],[["result",["error"]],["error"]]]],[11,"algorithm_type","","Returns the type of operations that the algorithm is…",23,[[],["keymanagementalgorithmtype"]]],[11,"cek","","Return the Content Encryption Key (CEK) based on the key…",23,[[["contentencryptionalgorithm"],["jwk"]],[["jwk",["empty"]],["result",["jwk","error"]],["error"]]]],[11,"wrap_key","","Encrypt or wrap a Content Encryption Key with the provided…",23,[[["encryptionoptions"],["jwk"]],[["error"],["result",["encryptionresult","error"]],["encryptionresult"]]]],[11,"unwrap_key","","Decrypt or unwrap a CEK with the provided algorithm",23,[[["encryptionresult"],["contentencryptionalgorithm"],["jwk"]],[["jwk",["empty"]],["result",["jwk","error"]],["error"]]]],[11,"generate_key","","Convenience function to generate a new random key with the…",25,[[],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[11,"encrypt","","Encrypt some payload with the provided algorith",25,[[["encryptionoptions"],["jwk"]],[["error"],["result",["encryptionresult","error"]],["encryptionresult"]]]],[11,"decrypt","","Decrypt some payload with the provided algorith,",25,[[["encryptionresult"],["jwk"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[0,"jwe","biscuit","JSON Web Encryption",null,null],[3,"RegisteredHeader","biscuit::jwe","Registered JWE header fields. The fields are defined by…",null,null],[12,"cek_algorithm","","Algorithm used to encrypt or determine the value of the…",26,null],[12,"enc_algorithm","","Content encryption algorithm used to perform authenticated…",26,null],[12,"compression_algorithm","","Compression algorithm applied to plaintext before…",26,null],[12,"media_type","","Media type of the complete JWE. Serialized to `typ`.…",26,null],[12,"content_type","","Content Type of the secured payload. Typically used to…",26,null],[12,"web_key_url","","The JSON Web Key Set URL. This is currently not…",26,null],[12,"web_key","","The JSON Web Key. This is currently not implemented…",26,null],[12,"key_id","","The Key ID. This is currently not implemented (correctly).…",26,null],[12,"x509_url","","X.509 Public key cerfificate URL. This is currently not…",26,null],[12,"x509_chain","","X.509 public key certificate chain. This is currently not…",26,null],[12,"x509_fingerprint","","X.509 Certificate thumbprint. This is currently not…",26,null],[12,"critical","","List of critical extended headers. This is currently not…",26,null],[3,"CekAlgorithmHeader","","Headers specific to the Key management algorithm used.…",null,null],[12,"nonce","","Header for AES GCM Keywrap algorithm. The initialization…",27,null],[12,"tag","","Header for AES GCM Keywrap algorithm. The authentication…",27,null],[3,"Header","","JWE Header, consisting of the registered fields and other…",null,null],[12,"registered","","Registered header fields",28,null],[12,"cek_algorithm","","Key management algorithm specific headers",28,null],[12,"private","","Private header fields",28,null],[4,"CompressionAlgorithm","","Compression algorithm applied to plaintext before…",null,null],[13,"Deflate","","DEFLATE algorithm defined in RFC 1951",29,null],[13,"Other","","Other user-defined algorithm",29,null],[4,"Compact","","Compact representation of a JWE, or an encrypted JWT",null,null],[13,"Decrypted","","Decrypted form of the JWE. This variant cannot be…",30,null],[12,"header","biscuit::jwe::Compact","Embedded header",31,null],[12,"payload","","Payload, usually a signed/unsigned JWT",31,null],[13,"Encrypted","biscuit::jwe","Encrypted JWT. Use this form to send to your clients",30,null],[11,"from_registered_header","","Convenience function to create a header with only…",28,[[["registeredheader"]],["self"]]],[11,"new_decrypted","","Create a new encrypted JWE",30,[[["header"],["t"]],["self"]]],[11,"new_encrypted","","Create a new encrypted JWE",30,[[["str"]],["self"]]],[11,"into_encrypted","","Consumes self and encrypt it. If the token is already…",30,[[["jwk"],["encryptionoptions"]],[["result",["error"]],["error"]]]],[11,"encrypt","","Encrypt an Decrypted JWE.",30,[[["jwk"],["self"],["encryptionoptions"]],[["result",["error"]],["error"]]]],[11,"into_decrypted","","Consumes self and decrypt it. If the token is already…",30,[[["jwk"],["contentencryptionalgorithm"],["keymanagementalgorithm"]],[["result",["error"]],["error"]]]],[11,"decrypt","","Decrypt an encrypted JWE. Provide the expected algorithms…",30,[[["contentencryptionalgorithm"],["jwk"],["self"],["keymanagementalgorithm"]],[["result",["error"]],["error"]]]],[11,"encrypted","","Convenience method to get a reference to the encrypted…",30,[[["self"]],[["error"],["result",["compact","error"]],["compact"]]]],[11,"encrypted_mut","","Convenience method to get a mutable reference to the…",30,[[["self"]],[["error"],["compact"],["result",["compact","error"]]]]],[11,"payload","","Convenience method to get a reference to the payload from…",30,[[["self"]],[["result",["error"]],["t"],["error"]]]],[11,"payload_mut","","Convenience method to get a mutable reference to the…",30,[[["self"]],[["error"],["t"],["result",["error"]]]]],[11,"header","","Convenience method to get a reference to the header from…",30,[[["self"]],[["result",["header","error"]],["header"],["error"]]]],[11,"header_mut","","Convenience method to get a reference to the header from…",30,[[["self"]],[["error"],["result",["header","error"]],["header"]]]],[11,"unwrap_decrypted","","Consumes self, and move the payload and header out and…",30,[[]]],[11,"unwrap_encrypted","","Consumes self, and move the encrypted Compact…",30,[[],["compact"]]],[11,"validate","","Validate the temporal claims in the decoded token",30,[[["self"],["validationoptions"]],[["result",["error"]],["error"]]]],[0,"jwk","biscuit","JSON Web Key",null,null],[3,"CommonParameters","biscuit::jwk","Common JWK parameters",null,null],[12,"public_key_use","","The intended use of the public key. Should not be…",32,null],[12,"key_operations","","The \"key_ops\" (key operations) parameter identifies the…",32,null],[12,"algorithm","","The algorithm intended for use with the key",32,null],[12,"key_id","","The case sensitive Key ID for the key",32,null],[12,"x509_url","","X.509 Public key cerfificate URL. This is currently not…",32,null],[12,"x509_chain","","X.509 public key certificate chain. This is currently not…",32,null],[12,"x509_fingerprint","","X.509 Certificate thumbprint. This is currently not…",32,null],[3,"EllipticCurveKeyParameters","","Parameters for an Elliptic Curve Key",null,null],[12,"key_type","","Key type value for an Elliptic Curve Key.",33,null],[12,"curve","","The \"crv\" (curve) parameter identifies the cryptographic…",33,null],[12,"x","","The \"x\" (x coordinate) parameter contains the x coordinate…",33,null],[12,"y","","The \"y\" (y coordinate) parameter contains the y coordinate…",33,null],[12,"d","","The \"d\" (ECC private key) parameter contains the Elliptic…",33,null],[3,"RSAKeyParameters","","Parameters for a RSA Key",null,null],[12,"key_type","","Key type value for a RSA Key",34,null],[12,"n","","The \"n\" (modulus) parameter contains the modulus value for…",34,null],[12,"e","","The \"e\" (exponent) parameter contains the exponent value…",34,null],[12,"d","","The \"d\" (private exponent) parameter contains the private…",34,null],[12,"p","","The \"p\" (first prime factor) parameter contains the first…",34,null],[12,"q","","The \"q\" (second prime factor) parameter contains the…",34,null],[12,"dp","","The \"dp\" (first factor CRT exponent) parameter contains…",34,null],[12,"dq","","The \"dq\" (second factor CRT exponent) parameter contains…",34,null],[12,"qi","","The \"qi\" (first CRT coefficient) parameter contains the…",34,null],[12,"other_primes_info","","The \"oth\" (other primes info) parameter contains an array…",34,null],[3,"OtherPrimesInfo","","The \"oth\" (other primes info) parameter contains an array…",null,null],[12,"r","","The \"r\" (prime factor) parameter represents the value of a…",35,null],[12,"d","","The \"d\" (factor CRT exponent) parameter represents the CRT…",35,null],[12,"t","","The \"t\" (factor CRT coefficient) parameter member…",35,null],[3,"OctetKeyParameters","","Parameters for an Octet Key",null,null],[12,"key_type","","Key type value for an Octet Key",36,null],[12,"value","","The octet key value",36,null],[3,"OctetKeyPairParameters","","Parameters for an Octet Key Pair",null,null],[12,"key_type","","Key type value for an Octet Key Pair",37,null],[12,"curve","","The \"crv\" (curve) parameter identifies the cryptographic…",37,null],[12,"x","","The \"x\" parameter contains the base64 encoded public key",37,null],[12,"d","","The \"d\" parameter contains the base64 encoded private key",37,null],[3,"JWK","","A JSON object that represents a cryptographic key. The…",null,null],[12,"common","","Common JWK parameters",38,null],[12,"algorithm","","Key algorithm specific parameters",38,null],[12,"additional","","Additional JWK parameters",38,null],[3,"JWKSet","","A JSON object that represents a set of JWKs.",null,null],[12,"keys","","Containted JWKs",39,null],[4,"KeyType","","Type of Key as specified in RFC 7518.",null,null],[13,"EllipticCurve","","Elliptic curve (EC) key",40,null],[13,"RSA","","RSA key",40,null],[13,"Octet","","Octet symmetric key",40,null],[13,"OctetKeyPair","","Octet key pair",40,null],[4,"PublicKeyUse","","The intended usage of the public `KeyType`. This enum is…",null,null],[13,"Signature","","Indicates a public key is meant for signature verification",41,null],[13,"Encryption","","Indicates a public key is meant for encryption",41,null],[13,"Other","","Other usage",41,null],[4,"KeyOperations","","Operations that the key is intended to be used for. This…",null,null],[13,"Sign","","Computer digitial signature or MAC",42,null],[13,"Verify","","Verify digital signature or MAC",42,null],[13,"Encrypt","","Encrypt content",42,null],[13,"Decrypt","","Decrypt content and validate decryption, if applicable",42,null],[13,"WrapKey","","Encrypt key",42,null],[13,"UnwrapKey","","Decrypt key and validate decryption, if applicable",42,null],[13,"DeriveKey","","Derive key",42,null],[13,"DeriveBits","","Derive bits not to be used as a key",42,null],[13,"Other","","Other operation",42,null],[4,"AlgorithmParameters","","Algorithm specific parameters",null,null],[13,"EllipticCurve","","Elliptic curve (EC) key",43,null],[13,"RSA","","RSA key",43,null],[13,"OctetKey","","Octet symmetric key",43,null],[13,"OctetKeyPair","","Octet key pair",43,null],[4,"EllipticCurveKeyType","","Key type value for an Elliptic Curve Key. This single…",null,null],[13,"EC","","Key type value for an Elliptic Curve Key.",44,null],[4,"RSAKeyType","","Key type value for an RSA Key. This single value enum is a…",null,null],[13,"RSA","","Key type value for an RSA Key.",45,null],[4,"OctetKeyType","","Key type value for an Octet symmetric key. This single…",null,null],[13,"Octet","","Key type value for an Octet symmetric key.",46,null],[4,"OctetKeyPairType","","Key type value for an Octet Key Pair. This single value…",null,null],[13,"OctetKeyPair","","Key type value for an Octet Key Pair.",47,null],[4,"EllipticCurve","","Type of cryptographic curve used by a key. This is defined…",null,null],[13,"P256","","P-256 curve",48,null],[13,"P384","","P-384 curve",48,null],[13,"P521","","P-521 curve -- unsupported by `ring`.",48,null],[13,"Curve25519","","Curve25519",48,null],[13,"Curve448","","Curve448",48,null],[11,"description","","Description of the type of key",40,[[],["str"]]],[11,"key_type","","Returns the type of key represented by this set of…",43,[[["self"]],["keytype"]]],[11,"octet_key","","Return the byte sequence of an octet key",43,[[["self"]],[["error"],["result",["error"]]]]],[11,"jws_public_key_secret","","Construct a `jws::Secret` RSA public key for signature…",34,[[["self"]],["secret"]]],[11,"new_octet_key","","Convenience to create a new bare-bones Octet key",38,[[["t"]],["self"]]],[11,"clone_without_additional","","Convenience function to strip out the additional fields",38,[[["self"]],[["jwk",["empty"]],["empty"]]]],[11,"key_type","","Returns the type of key represented by this key",38,[[["self"]],["keytype"]]],[11,"octet_key","","Return the byte sequence of an octet key",38,[[["self"]],[["error"],["result",["error"]]]]],[11,"find","","Find the key in the set that matches the given key id, if…",39,[[["str"],["self"]],[["jwk"],["option",["jwk"]]]]],[0,"jws","biscuit","JSON Web Signatures, including JWT signing and headers",null,null],[3,"Header","biscuit::jws","JWS Header, consisting of the registered fields and other…",null,null],[12,"registered","","Registered header fields",49,null],[12,"private","","Private header fields",49,null],[3,"RegisteredHeader","","Registered JWS header fields. The alg defaults to HS256…",null,null],[12,"algorithm","","Algorithms, as defined in RFC 7518, used to sign or…",50,null],[12,"media_type","","Media type of the complete JWS. Serialized to `typ`.…",50,null],[12,"content_type","","Content Type of the secured payload. Typically used to…",50,null],[12,"web_key_url","","The JSON Web Key Set URL. This is currently not…",50,null],[12,"web_key","","The JSON Web Key. This is currently not implemented…",50,null],[12,"key_id","","The Key ID. This is currently not implemented (correctly).…",50,null],[12,"x509_url","","X.509 Public key cerfificate URL. This is currently not…",50,null],[12,"x509_chain","","X.509 public key certificate chain. This is currently not…",50,null],[12,"x509_fingerprint","","X.509 Certificate thumbprint. This is currently not…",50,null],[12,"critical","","List of critical extended headers. This is currently not…",50,null],[4,"Compact","","Compact representation of a JWS",null,null],[13,"Decoded","","Decoded form of the JWS. This variant cannot be serialized…",51,null],[12,"header","biscuit::jws::Compact","Embedded header",52,null],[12,"payload","","Payload, usually a claims set",52,null],[13,"Encoded","biscuit::jws","Encoded and (optionally) signed JWT. Use this form to send…",51,null],[4,"Secret","","The secrets used to sign and/or encrypt tokens",null,null],[13,"None","","Used with the `None` algorithm variant.",53,null],[13,"Bytes","","Bytes used for HMAC secret. Can be constructed from a…",53,null],[13,"RsaKeyPair","","An RSA Key pair constructed from a DER-encoded private key",53,null],[13,"EcdsaKeyPair","","An ECDSA Key pair constructed from a PKCS8 DER encoded…",53,null],[13,"PublicKey","","Bytes of a DER encoded RSA Public Key",53,null],[13,"RSAModulusExponent","","Use the modulus (`n`) and exponent (`e`) of an RSA key…",53,null],[12,"n","biscuit::jws::Secret","RSA modulus",54,null],[12,"e","","RSA exponent",54,null],[11,"new_decoded","biscuit::jws","New decoded JWT",51,[[["header"],["t"]],["self"]]],[11,"new_encoded","","New encoded JWT",51,[[["str"]],["self"]]],[11,"into_encoded","","Consumes self and convert into encoded form. If the token…",51,[[["secret"]],[["result",["error"]],["error"]]]],[11,"encode","","Encode the JWT passed and sign the payload using the…",51,[[["secret"],["self"]],[["result",["error"]],["error"]]]],[11,"into_decoded","","Consumes self and convert into decoded form, verifying the…",51,[[["secret"],["signaturealgorithm"]],[["result",["error"]],["error"]]]],[11,"decode","","Decode a token into the JWT struct and verify its…",51,[[["secret"],["self"],["signaturealgorithm"]],[["result",["error"]],["error"]]]],[11,"decode_with_jwks","","Decode a token into the JWT struct and verify its…",51,[[["option",["signaturealgorithm"]],["signaturealgorithm"],["self"],["jwkset"]],[["result",["error"]],["error"]]]],[11,"encoded","","Convenience method to get a reference to the encoded…",51,[[["self"]],[["error"],["result",["compact","error"]],["compact"]]]],[11,"encoded_mut","","Convenience method to get a mutable reference to the…",51,[[["self"]],[["error"],["compact"],["result",["compact","error"]]]]],[11,"payload","","Convenience method to get a reference to the claims set…",51,[[["self"]],[["result",["error"]],["t"],["error"]]]],[11,"payload_mut","","Convenience method to get a reference to the claims set…",51,[[["self"]],[["error"],["t"],["result",["error"]]]]],[11,"header","","Convenience method to get a reference to the header from a…",51,[[["self"]],[["error"],["result",["header","error"]],["header"]]]],[11,"header_mut","","Convenience method to get a reference to the header from a…",51,[[["self"]],[["error"],["header"],["result",["header","error"]]]]],[11,"unwrap_decoded","","Consumes self, and move the payload and header out and…",51,[[]]],[11,"unwrap_encoded","","Consumes self, and move the encoded Compact out and return…",51,[[],["compact"]]],[11,"unverified_header","","Without decoding and verifying the JWS, retrieve a copy of…",51,[[["self"]],[["result",["header","error"]],["error"],["header"]]]],[11,"unverified_payload","","Without decoding and verifying the JWS, retrieve a copy of…",51,[[["self"]],[["error"],["result",["error"]]]]],[11,"signature","","Get a copy of the signature",51,[[["self"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[11,"validate","","Validate the temporal claims in the decoded token",51,[[["self"],["validationoptions"]],[["result",["error"]],["error"]]]],[11,"bytes_from_str","","Convenience function to create a secret bytes array from a…",53,[[["str"]],["self"]]],[11,"rsa_keypair_from_file","","Convenience function to get the RSA Keypair from a DER…",53,[[["str"]],[["result",["error"]],["error"]]]],[11,"ecdsa_keypair_from_file","","Convenience function to get the ECDSA Keypair from a…",53,[[["str"],["signaturealgorithm"]],[["result",["error"]],["error"]]]],[11,"public_key_from_file","","Convenience function to create a Public key from a DER…",53,[[["str"]],[["result",["error"]],["error"]]]],[11,"from_registered_header","","Convenience function to create a header with only…",49,[[["registeredheader"]],["self"]]],[6,"JWT","biscuit","A convenience type alias of the common \"JWT\" which is a…",null,null],[6,"JWE","","A convenience type alias of a \"JWE\" which is a compact JWE…",null,null],[8,"CompactPart","","A \"part\" of the compact representation of JWT/JWS/JWE.…",null,null],[10,"to_bytes","","Convert this part into bytes",55,[[["self"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[10,"from_bytes","","Convert a sequence of bytes into Self",55,[[],[["result",["error"]],["error"]]]],[11,"from_base64","","Base64 decode into Self",55,[[["b"]],[["result",["error"]],["error"]]]],[11,"to_base64","","Serialize `Self` to some form and then base64URL Encode",55,[[["self"]],[["error"],["result",["base64url","error"]],["base64url"]]]],[8,"CompactJson","","A marker trait that indicates that the object is to be…",null,null],[11,"unwrap","","Unwrap the embedded string, consuming self in the process",56,[[],["string"]]],[11,"str","","\"Borrow\" the string",56,[[["self"]],["str"]]],[11,"new","","Create an empty struct",2,[[],["self"]]],[11,"with_capacity","","Create an empty struct with some expected capacity",2,[[["usize"]],["self"]]],[11,"push","","Push a `CompactPart` to the end",2,[[["compactpart"],["self"]],[["result",["error"]],["error"]]]],[11,"len","","Returns the number of parts",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether there are no parts",2,[[["self"]],["bool"]]],[11,"encode","","Encodes the various parts into Base64 URL encoding and…",2,[[["self"]],["string"]]],[11,"decode","","Convenience function to split an encoded compact…",2,[[["str"]],["self"]]],[11,"part","","Convenience function to retrieve a part at a certain index…",2,[[["self"],["usize"]],[["error"],["result",["error"]],["compactpart"]]]],[11,"contains","","Checks whether this enum, regardless of single or multiple…",9,[[["self"],["q"]],["bool"]]],[11,"iter","","Yields an iterator for the single value or the list",9,[[["self"]],[["box",["iterator"]],["iterator"]]]],[11,"strict","","Returns a ClaimPresenceOptions where every claim is…",4,[[],["self"]]],[11,"validate_claim_presence","","Validates that the token contains the claims defined as…",3,[[["claimpresenceoptions"],["self"]],[["result",["validationerror"]],["validationerror"]]]],[11,"validate_exp","","Validates that if the token has an `exp` claim, it has not…",3,[[["validation",["temporaloptions"]],["temporaloptions"],["self"]],[["result",["validationerror"]],["validationerror"]]]],[11,"validate_nbf","","Validates that if the token has an `nbf` claim, it has…",3,[[["validation",["temporaloptions"]],["temporaloptions"],["self"]],[["result",["validationerror"]],["validationerror"]]]],[11,"validate_iat","","Validates that if the token has an `iat` claim, it is not…",3,[[["validation"],["self"]],[["result",["validationerror"]],["validationerror"]]]],[11,"validate_aud","","Validates that if the token has an `aud` claim, it…",3,[[["stringoruri"],["self"],["validation",["stringoruri"]]],[["result",["validationerror"]],["validationerror"]]]],[11,"validate_iss","","Validates that if the token has an `iss` claim, it matches…",3,[[["stringoruri"],["self"],["validation",["stringoruri"]]],[["result",["validationerror"]],["validationerror"]]]],[11,"validate","","Performs full validation of the token according to the…",3,[[["validationoptions"],["self"]],[["result",["validationerror"]],["validationerror"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"equivalent","","",57,[[["k"],["self"]],["bool"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"equivalent","","",1,[[["k"],["self"]],["bool"]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",58,[[["self"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"from_bytes","","",58,[[],[["result",["error"]],["error"]]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"equivalent","","",58,[[["k"],["self"]],["bool"]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",56,[[["self"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"from_bytes","","",56,[[],[["result",["error"]],["error"]]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"equivalent","","",56,[[["k"],["self"]],["bool"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"equivalent","","",2,[[["k"],["self"]],["bool"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"equivalent","","",59,[[["k"],["self"]],["bool"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"equivalent","","",3,[[["k"],["self"]],["bool"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"equivalent","","",4,[[["k"],["self"]],["bool"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"equivalent","","",5,[[["k"],["self"]],["bool"]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",6,[[["self"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"from_bytes","","",6,[[],[["result",["error"]],["error"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"equivalent","","",6,[[["k"],["self"]],["bool"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"equivalent","","",7,[[["k"],["self"]],["bool"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"equivalent","","",8,[[["k"],["self"]],["bool"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"equivalent","","",9,[[["k"],["self"]],["bool"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"equivalent","","",10,[[["k"],["self"]],["bool"]]],[11,"from","biscuit::errors","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"equivalent","","",16,[[["k"],["self"]],["bool"]]],[11,"from","biscuit::jwa","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"equivalent","","",18,[[["k"],["self"]],["bool"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"equivalent","","",19,[[["k"],["self"]],["bool"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"equivalent","","",21,[[["k"],["self"]],["bool"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"equivalent","","",22,[[["k"],["self"]],["bool"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"equivalent","","",23,[[["k"],["self"]],["bool"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"equivalent","","",24,[[["k"],["self"]],["bool"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"equivalent","","",25,[[["k"],["self"]],["bool"]]],[11,"from","biscuit::jwe","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"equivalent","","",26,[[["k"],["self"]],["bool"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"equivalent","","",27,[[["k"],["self"]],["bool"]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",28,[[["self"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"from_bytes","","",28,[[],[["result",["error"]],["error"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"equivalent","","",28,[[["k"],["self"]],["bool"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"equivalent","","",29,[[["k"],["self"]],["bool"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"equivalent","","",30,[[["k"],["self"]],["bool"]]],[11,"from","biscuit::jwk","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"equivalent","","",32,[[["k"],["self"]],["bool"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"equivalent","","",33,[[["k"],["self"]],["bool"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"equivalent","","",34,[[["k"],["self"]],["bool"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"equivalent","","",35,[[["k"],["self"]],["bool"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"equivalent","","",36,[[["k"],["self"]],["bool"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"equivalent","","",37,[[["k"],["self"]],["bool"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"equivalent","","",38,[[["k"],["self"]],["bool"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"equivalent","","",39,[[["k"],["self"]],["bool"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"equivalent","","",40,[[["k"],["self"]],["bool"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"equivalent","","",41,[[["k"],["self"]],["bool"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"equivalent","","",42,[[["k"],["self"]],["bool"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"equivalent","","",43,[[["k"],["self"]],["bool"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"equivalent","","",44,[[["k"],["self"]],["bool"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"equivalent","","",45,[[["k"],["self"]],["bool"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"equivalent","","",46,[[["k"],["self"]],["bool"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"equivalent","","",47,[[["k"],["self"]],["bool"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"equivalent","","",48,[[["k"],["self"]],["bool"]]],[11,"to_bytes","biscuit::jws","JSON serialize the part and return the JSON string bytes",49,[[["self"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"from_bytes","","",49,[[],[["result",["error"]],["error"]]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"equivalent","","",49,[[["k"],["self"]],["bool"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"equivalent","","",50,[[["k"],["self"]],["bool"]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",51,[[["self"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"from_bytes","","",51,[[],[["result",["error"]],["error"]]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"equivalent","","",51,[[["k"],["self"]],["bool"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from_str","biscuit","",57,[[["str"]],[["parseerror"],["result",["url","parseerror"]],["url"]]]],[11,"from","","",0,[[["errors"]],["parseerror"]]],[11,"as_ref","","",57,[[["self"]],["str"]]],[11,"index","","",57,[[["self"],["rangefull"]],["str"]]],[11,"index","","",57,[[["range",["position"]],["self"],["position"]],["str"]]],[11,"index","","",57,[[["rangefrom",["position"]],["self"],["position"]],["str"]]],[11,"index","","",57,[[["rangeto",["position"]],["self"],["position"]],["str"]]],[11,"fmt","","",0,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",57,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",57,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",0,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"cmp","","",57,[[["self"],["url"]],["ordering"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"clone","","",57,[[["self"]],["url"]]],[11,"clone","","",0,[[["self"]],["parseerror"]]],[11,"hash","","",57,[[["self"],["h"]]]],[11,"eq","","",0,[[["parseerror"],["self"]],["bool"]]],[11,"eq","","",57,[[["self"],["url"]],["bool"]]],[11,"partial_cmp","","",57,[[["self"],["url"]],[["ordering"],["option",["ordering"]]]]],[11,"to_bytes","biscuit::jws","",51,[[["self"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[11,"from_bytes","","",51,[[],[["result",["error"]],["error"]]]],[11,"to_bytes","biscuit","",56,[[["self"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[11,"from_bytes","","Convert a sequence of bytes into Self",56,[[],[["result",["error"]],["error"]]]],[11,"to_base64","","",56,[[["self"]],[["error"],["result",["base64url","error"]],["base64url"]]]],[11,"from_base64","","",56,[[["b"]],[["result",["error"]],["error"]]]],[11,"as_ref","","",56,[[["self"]]]],[11,"as_ref","","",10,[[["self"]],["str"]]],[11,"from","biscuit::errors","",11,[[["string"]],["error"]]],[11,"from","","",11,[[["error"]],["error"]]],[11,"from","","",11,[[["decodeerror"]],["error"]]],[11,"from","","",11,[[["utf8error"]],["error"]]],[11,"from","","",11,[[["validationerror"]],["error"]]],[11,"from","","",11,[[["decodeerror"]],["error"]]],[11,"from","","",11,[[["error"]],["error"]]],[11,"from","","",11,[[["parseerror"]],["error"]]],[11,"from","","",11,[[["keyrejected"]],["error"]]],[11,"from","","",11,[[["unspecified"]],["self"]]],[11,"from","","",11,[[["fromutf8error"]],["self"]]],[11,"from","biscuit::jwe","",28,[[["registeredheader"]],["self"]]],[11,"from","biscuit::jws","",53,[[["rsakeyparameters"]],["self"]]],[11,"from","","",49,[[["registeredheader"]],["self"]]],[11,"from","biscuit","",59,[[["utc"],["datetime",["utc"]]],["self"]]],[11,"from","","",59,[[["i64"]],["self"]]],[11,"into","","",59,[[],[["utc"],["datetime",["utc"]]]]],[11,"clone","","",7,[[["self"]],["presence"]]],[11,"clone","","",1,[[["self"]],["temporaloptions"]]],[11,"clone","","",8,[[["self"]],["validation"]]],[11,"clone","biscuit::errors","",16,[[["self"]],["validationerror"]]],[11,"clone","biscuit::jwa","",19,[[["self"]],["encryptionoptions"]]],[11,"clone","","",21,[[["self"]],["algorithm"]]],[11,"clone","","",22,[[["self"]],["signaturealgorithm"]]],[11,"clone","","",23,[[["self"]],["keymanagementalgorithm"]]],[11,"clone","","",24,[[["self"]],["keymanagementalgorithmtype"]]],[11,"clone","","",25,[[["self"]],["contentencryptionalgorithm"]]],[11,"clone","","",18,[[["self"]],["encryptionresult"]]],[11,"clone","biscuit::jwe","",29,[[["self"]],["compressionalgorithm"]]],[11,"clone","","",26,[[["self"]],["registeredheader"]]],[11,"clone","","",27,[[["self"]],["cekalgorithmheader"]]],[11,"clone","","",28,[[["self"]],["header"]]],[11,"clone","","",30,[[["self"]],["compact"]]],[11,"clone","biscuit::jwk","",40,[[["self"]],["keytype"]]],[11,"clone","","",41,[[["self"]],["publickeyuse"]]],[11,"clone","","",42,[[["self"]],["keyoperations"]]],[11,"clone","","",32,[[["self"]],["commonparameters"]]],[11,"clone","","",43,[[["self"]],["algorithmparameters"]]],[11,"clone","","",33,[[["self"]],["ellipticcurvekeyparameters"]]],[11,"clone","","",34,[[["self"]],["rsakeyparameters"]]],[11,"clone","","",35,[[["self"]],["otherprimesinfo"]]],[11,"clone","","",36,[[["self"]],["octetkeyparameters"]]],[11,"clone","","",37,[[["self"]],["octetkeypairparameters"]]],[11,"clone","","",44,[[["self"]],["ellipticcurvekeytype"]]],[11,"clone","","",45,[[["self"]],["rsakeytype"]]],[11,"clone","","",46,[[["self"]],["octetkeytype"]]],[11,"clone","","",47,[[["self"]],["octetkeypairtype"]]],[11,"clone","","",48,[[["self"]],["ellipticcurve"]]],[11,"clone","","",38,[[["self"]],["jwk"]]],[11,"clone","biscuit::jws","",51,[[["self"]],["compact"]]],[11,"clone","","",49,[[["self"]],["header"]]],[11,"clone","","",50,[[["self"]],["registeredheader"]]],[11,"clone","biscuit","",58,[[["self"]],["empty"]]],[11,"clone","","",56,[[["self"]],["base64url"]]],[11,"clone","","",2,[[["self"]],["compact"]]],[11,"clone","","",9,[[["self"]],["singleormultiple"]]],[11,"clone","","",10,[[["self"]],["stringoruri"]]],[11,"clone","","",59,[[["self"]],["timestamp"]]],[11,"clone","","",3,[[["self"]],["registeredclaims"]]],[11,"clone","","",4,[[["self"]],["claimpresenceoptions"]]],[11,"clone","","",5,[[["self"]],["validationoptions"]]],[11,"clone","","",6,[[["self"]],["claimsset"]]],[11,"default","","",7,[[],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",8,[[],["self"]]],[11,"default","biscuit::jwa","",18,[[],["encryptionresult"]]],[11,"default","","",19,[[],["self"]]],[11,"default","","",22,[[],["self"]]],[11,"default","","",23,[[],["self"]]],[11,"default","","",25,[[],["self"]]],[11,"default","biscuit::jwe","",26,[[],["registeredheader"]]],[11,"default","","",27,[[],["cekalgorithmheader"]]],[11,"default","","",28,[[],["header"]]],[11,"default","biscuit::jwk","",32,[[],["commonparameters"]]],[11,"default","","",33,[[],["ellipticcurvekeyparameters"]]],[11,"default","","",34,[[],["rsakeyparameters"]]],[11,"default","","",36,[[],["octetkeyparameters"]]],[11,"default","","",37,[[],["octetkeypairparameters"]]],[11,"default","","",44,[[],["self"]]],[11,"default","","",45,[[],["self"]]],[11,"default","","",46,[[],["self"]]],[11,"default","","",47,[[],["self"]]],[11,"default","","",48,[[],["self"]]],[11,"default","biscuit::jws","",49,[[],["header"]]],[11,"default","","",50,[[],["registeredheader"]]],[11,"default","biscuit","",58,[[],["empty"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["registeredclaims"]]],[11,"default","","",4,[[],["claimpresenceoptions"]]],[11,"default","","",5,[[],["self"]]],[11,"default","","",6,[[],["claimsset"]]],[11,"eq","","",7,[[["self"],["presence"]],["bool"]]],[11,"eq","","",1,[[["self"],["temporaloptions"]],["bool"]]],[11,"ne","","",1,[[["self"],["temporaloptions"]],["bool"]]],[11,"eq","","",8,[[["validation"],["self"]],["bool"]]],[11,"ne","","",8,[[["validation"],["self"]],["bool"]]],[11,"eq","biscuit::errors","",16,[[["validationerror"],["self"]],["bool"]]],[11,"ne","","",16,[[["validationerror"],["self"]],["bool"]]],[11,"eq","biscuit::jwa","",19,[[["self"],["encryptionoptions"]],["bool"]]],[11,"ne","","",19,[[["self"],["encryptionoptions"]],["bool"]]],[11,"eq","","",21,[[["self"],["algorithm"]],["bool"]]],[11,"ne","","",21,[[["self"],["algorithm"]],["bool"]]],[11,"eq","","",22,[[["self"],["signaturealgorithm"]],["bool"]]],[11,"eq","","",23,[[["self"],["keymanagementalgorithm"]],["bool"]]],[11,"eq","","",24,[[["self"],["keymanagementalgorithmtype"]],["bool"]]],[11,"eq","","",25,[[["self"],["contentencryptionalgorithm"]],["bool"]]],[11,"eq","","",18,[[["encryptionresult"],["self"]],["bool"]]],[11,"ne","","",18,[[["encryptionresult"],["self"]],["bool"]]],[11,"eq","biscuit::jwe","",29,[[["compressionalgorithm"],["self"]],["bool"]]],[11,"ne","","",29,[[["compressionalgorithm"],["self"]],["bool"]]],[11,"eq","","",26,[[["registeredheader"],["self"]],["bool"]]],[11,"ne","","",26,[[["registeredheader"],["self"]],["bool"]]],[11,"eq","","",27,[[["self"],["cekalgorithmheader"]],["bool"]]],[11,"ne","","",27,[[["self"],["cekalgorithmheader"]],["bool"]]],[11,"eq","","",28,[[["header"],["self"]],["bool"]]],[11,"ne","","",28,[[["header"],["self"]],["bool"]]],[11,"eq","","",30,[[["compact"],["self"]],["bool"]]],[11,"ne","","",30,[[["compact"],["self"]],["bool"]]],[11,"eq","biscuit::jwk","",40,[[["self"],["keytype"]],["bool"]]],[11,"eq","","",41,[[["self"],["publickeyuse"]],["bool"]]],[11,"ne","","",41,[[["self"],["publickeyuse"]],["bool"]]],[11,"eq","","",42,[[["keyoperations"],["self"]],["bool"]]],[11,"ne","","",42,[[["keyoperations"],["self"]],["bool"]]],[11,"eq","","",32,[[["commonparameters"],["self"]],["bool"]]],[11,"ne","","",32,[[["commonparameters"],["self"]],["bool"]]],[11,"eq","","",43,[[["algorithmparameters"],["self"]],["bool"]]],[11,"ne","","",43,[[["algorithmparameters"],["self"]],["bool"]]],[11,"eq","","",33,[[["self"],["ellipticcurvekeyparameters"]],["bool"]]],[11,"ne","","",33,[[["self"],["ellipticcurvekeyparameters"]],["bool"]]],[11,"eq","","",34,[[["self"],["rsakeyparameters"]],["bool"]]],[11,"ne","","",34,[[["self"],["rsakeyparameters"]],["bool"]]],[11,"eq","","",35,[[["otherprimesinfo"],["self"]],["bool"]]],[11,"ne","","",35,[[["otherprimesinfo"],["self"]],["bool"]]],[11,"eq","","",36,[[["octetkeyparameters"],["self"]],["bool"]]],[11,"ne","","",36,[[["octetkeyparameters"],["self"]],["bool"]]],[11,"eq","","",37,[[["octetkeypairparameters"],["self"]],["bool"]]],[11,"ne","","",37,[[["octetkeypairparameters"],["self"]],["bool"]]],[11,"eq","","",44,[[["self"],["ellipticcurvekeytype"]],["bool"]]],[11,"eq","","",45,[[["rsakeytype"],["self"]],["bool"]]],[11,"eq","","",46,[[["octetkeytype"],["self"]],["bool"]]],[11,"eq","","",47,[[["self"],["octetkeypairtype"]],["bool"]]],[11,"eq","","",48,[[["ellipticcurve"],["self"]],["bool"]]],[11,"eq","","",38,[[["jwk"],["self"]],["bool"]]],[11,"ne","","",38,[[["jwk"],["self"]],["bool"]]],[11,"eq","","",39,[[["self"],["jwkset"]],["bool"]]],[11,"ne","","",39,[[["self"],["jwkset"]],["bool"]]],[11,"eq","biscuit::jws","",51,[[["compact"],["self"]],["bool"]]],[11,"ne","","",51,[[["compact"],["self"]],["bool"]]],[11,"eq","","",49,[[["self"],["header"]],["bool"]]],[11,"ne","","",49,[[["self"],["header"]],["bool"]]],[11,"eq","","",50,[[["self"],["registeredheader"]],["bool"]]],[11,"ne","","",50,[[["self"],["registeredheader"]],["bool"]]],[11,"eq","biscuit","",58,[[["self"],["empty"]],["bool"]]],[11,"eq","","",56,[[["self"],["base64url"]],["bool"]]],[11,"ne","","",56,[[["self"],["base64url"]],["bool"]]],[11,"eq","","",2,[[["compact"],["self"]],["bool"]]],[11,"ne","","",2,[[["compact"],["self"]],["bool"]]],[11,"eq","","",9,[[["singleormultiple"],["self"]],["bool"]]],[11,"ne","","",9,[[["singleormultiple"],["self"]],["bool"]]],[11,"eq","","",10,[[["stringoruri"],["self"]],["bool"]]],[11,"ne","","",10,[[["stringoruri"],["self"]],["bool"]]],[11,"eq","","",59,[[["self"],["timestamp"]],["bool"]]],[11,"ne","","",59,[[["self"],["timestamp"]],["bool"]]],[11,"eq","","",3,[[["registeredclaims"],["self"]],["bool"]]],[11,"ne","","",3,[[["registeredclaims"],["self"]],["bool"]]],[11,"eq","","",4,[[["claimpresenceoptions"],["self"]],["bool"]]],[11,"ne","","",4,[[["claimpresenceoptions"],["self"]],["bool"]]],[11,"eq","","",5,[[["validationoptions"],["self"]],["bool"]]],[11,"ne","","",5,[[["validationoptions"],["self"]],["bool"]]],[11,"eq","","",6,[[["claimsset"],["self"]],["bool"]]],[11,"ne","","",6,[[["claimsset"],["self"]],["bool"]]],[11,"deref","","",56,[[["self"]],["str"]]],[11,"deref","","",59,[[["self"]]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit::errors","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit::jwa","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit::jwe","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit::jwk","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit::jws","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",56,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit::errors","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit::jwa","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit::jwk","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","biscuit","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"from_str","","This never fails",56,[[["str"]],["result"]]],[11,"from_str","","Parses a `&str` into a `StringOrUri`. According to RFC…",10,[[["str"]],["result"]]],[11,"borrow","","",56,[[["self"]],["str"]]],[11,"source","biscuit::errors","",11,[[["self"]],[["option",["error"]],["error"]]]],[11,"source","","",14,[[["self"]],[["option",["error"]],["error"]]]],[11,"source","","",16,[[["self"]],[["option",["error"]],["error"]]]],[11,"serialize","biscuit::jwa","",21,[[["self"],["__s"]],["result"]]],[11,"serialize","","",22,[[["self"],["__s"]],["result"]]],[11,"serialize","","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","","",24,[[["self"],["__s"]],["result"]]],[11,"serialize","","",25,[[["self"],["__s"]],["result"]]],[11,"serialize","biscuit::jwe","",29,[[["s"],["self"]],["result"]]],[11,"serialize","","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","","",27,[[["self"],["__s"]],["result"]]],[11,"serialize","","",28,[[["self"],["__s"]],["result"]]],[11,"serialize","","",30,[[["self"],["__s"]],["result"]]],[11,"serialize","biscuit::jwk","",40,[[["self"],["__s"]],["result"]]],[11,"serialize","","",41,[[["s"],["self"]],["result"]]],[11,"serialize","","",42,[[["s"],["self"]],["result"]]],[11,"serialize","","",32,[[["self"],["__s"]],["result"]]],[11,"serialize","","",43,[[["self"],["__s"]],["result"]]],[11,"serialize","","",33,[[["self"],["__s"]],["result"]]],[11,"serialize","","",34,[[["self"],["__s"]],["result"]]],[11,"serialize","","",35,[[["self"],["__s"]],["result"]]],[11,"serialize","","",36,[[["self"],["__s"]],["result"]]],[11,"serialize","","",37,[[["self"],["__s"]],["result"]]],[11,"serialize","","",44,[[["self"],["__s"]],["result"]]],[11,"serialize","","",45,[[["self"],["__s"]],["result"]]],[11,"serialize","","",46,[[["self"],["__s"]],["result"]]],[11,"serialize","","",47,[[["self"],["__s"]],["result"]]],[11,"serialize","","",48,[[["self"],["__s"]],["result"]]],[11,"serialize","","",38,[[["self"],["__s"]],["result"]]],[11,"serialize","","",39,[[["self"],["__s"]],["result"]]],[11,"serialize","biscuit::jws","",51,[[["self"],["__s"]],["result"]]],[11,"serialize","","",49,[[["self"],["__s"]],["result"]]],[11,"serialize","","",50,[[["self"],["__s"]],["result"]]],[11,"serialize","biscuit","",58,[[["self"],["__s"]],["result"]]],[11,"serialize","","",56,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["s"],["self"]],["result"]]],[11,"serialize","","",59,[[["s"],["self"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"deserialize","biscuit::jwa","",21,[[["__d"]],["result"]]],[11,"deserialize","","",22,[[["__d"]],["result"]]],[11,"deserialize","","",23,[[["__d"]],["result"]]],[11,"deserialize","","",24,[[["__d"]],["result"]]],[11,"deserialize","","",25,[[["__d"]],["result"]]],[11,"deserialize","biscuit::jwe","",29,[[["d"]],["result"]]],[11,"deserialize","","",26,[[["__d"]],["result"]]],[11,"deserialize","","",27,[[["__d"]],["result"]]],[11,"deserialize","","",28,[[["__d"]],["result"]]],[11,"deserialize","","",30,[[["__d"]],["result"]]],[11,"deserialize","biscuit::jwk","",40,[[["__d"]],["result"]]],[11,"deserialize","","",41,[[["d"]],["result"]]],[11,"deserialize","","",42,[[["d"]],["result"]]],[11,"deserialize","","",32,[[["__d"]],["result"]]],[11,"deserialize","","",43,[[["__d"]],["result"]]],[11,"deserialize","","",33,[[["__d"]],["result"]]],[11,"deserialize","","",34,[[["__d"]],["result"]]],[11,"deserialize","","",35,[[["__d"]],["result"]]],[11,"deserialize","","",36,[[["__d"]],["result"]]],[11,"deserialize","","",37,[[["__d"]],["result"]]],[11,"deserialize","","",44,[[["__d"]],["result"]]],[11,"deserialize","","",45,[[["__d"]],["result"]]],[11,"deserialize","","",46,[[["__d"]],["result"]]],[11,"deserialize","","",47,[[["__d"]],["result"]]],[11,"deserialize","","",48,[[["__d"]],["result"]]],[11,"deserialize","","",38,[[["__d"]],["result"]]],[11,"deserialize","","",39,[[["__d"]],["result"]]],[11,"deserialize","biscuit::jws","",51,[[["__d"]],["result"]]],[11,"deserialize","","",49,[[["__d"]],["result"]]],[11,"deserialize","","",50,[[["__d"]],["result"]]],[11,"deserialize","biscuit","",58,[[["__d"]],["result"]]],[11,"deserialize","","",56,[[["__d"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"deserialize","","",9,[[["__d"]],["result"]]],[11,"deserialize","","",10,[[["d"]],[["stringoruri"],["result",["stringoruri"]]]]],[11,"deserialize","","",59,[[["d"]],["result"]]],[11,"deserialize","","",3,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"parse","","Parse an absolute URL from a string.",57,[[["str"]],[["parseerror"],["result",["url","parseerror"]],["url"]]]],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its…",57,[[["str"],["i"]],[["parseerror"],["result",["url","parseerror"]],["url"]]]],[11,"join","","Parse a string as an URL, with this URL as the base URL.",57,[[["str"],["self"]],[["parseerror"],["result",["url","parseerror"]],["url"]]]],[11,"options","","Return a default `ParseOptions` that can fully configure…",57,[[],["parseoptions"]]],[11,"as_str","","Return the serialization of this URL.",57,[[["self"]],["str"]]],[11,"into_string","","Return the serialization of this URL.",57,[[],["string"]]],[11,"origin","","Return the origin of this URL…",57,[[["self"]],["origin"]]],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII…",57,[[["self"]],["str"]]],[11,"has_authority","","Return whether the URL has an 'authority', which can…",57,[[["self"]],["bool"]]],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning…",57,[[["self"]],["bool"]]],[11,"username","","Return the username for this URL (typically the empty…",57,[[["self"]],["str"]]],[11,"password","","Return the password for this URL, if any, as a…",57,[[["self"]],[["str"],["option",["str"]]]]],[11,"has_host","","Equivalent to `url.host().is_some()`.",57,[[["self"]],["bool"]]],[11,"host_str","","Return the string representation of the host (domain or IP…",57,[[["self"]],[["str"],["option",["str"]]]]],[11,"host","","Return the parsed representation of the host for this URL.…",57,[[["self"]],[["host",["str"]],["option",["host"]]]]],[11,"domain","","If this URL has a host and it is a domain name (not an IP…",57,[[["self"]],[["str"],["option",["str"]]]]],[11,"port","","Return the port number for this URL, if any.",57,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"port_or_known_default","","Return the port number for this URL, or the default port…",57,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"socket_addrs","","Resolve a URL’s host and port number to `SocketAddr`.",57,[[["self"]],[["vec",["socketaddr"]],["error"],["result",["vec","error"]]]]],[11,"path","","Return the path for this URL, as a percent-encoded ASCII…",57,[[["self"]],["str"]]],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of…",57,[[["self"]],[["option",["split"]],["split",["char"]]]]],[11,"query","","Return this URL’s query string, if any, as a…",57,[[["self"]],[["str"],["option",["str"]]]]],[11,"query_pairs","","Parse the URL’s query string, if any, as…",57,[[["self"]],["parse"]]],[11,"fragment","","Return this URL’s fragment identifier, if any.",57,[[["self"]],[["str"],["option",["str"]]]]],[11,"set_fragment","","Change this URL’s fragment identifier.",57,[[["str"],["self"],["option",["str"]]]]],[11,"set_query","","Change this URL’s query string.",57,[[["str"],["self"],["option",["str"]]]]],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence…",57,[[["self"]],[["serializer",["urlquery"]],["urlquery"]]]],[11,"set_path","","Change this URL’s path.",57,[[["str"],["self"]]]],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s…",57,[[["self"]],[["result",["pathsegmentsmut"]],["pathsegmentsmut"]]]],[11,"set_port","","Change this URL’s port number.",57,[[["u16"],["self"],["option",["u16"]]],["result"]]],[11,"set_host","","Change this URL’s host.",57,[[["str"],["self"],["option",["str"]]],[["result",["parseerror"]],["parseerror"]]]],[11,"set_ip_host","","Change this URL’s host to the given IP address.",57,[[["ipaddr"],["self"]],["result"]]],[11,"set_password","","Change this URL’s password.",57,[[["str"],["self"],["option",["str"]]],["result"]]],[11,"set_username","","Change this URL’s username.",57,[[["str"],["self"]],["result"]]],[11,"set_scheme","","Change this URL’s scheme.",57,[[["str"],["self"]],["result"]]],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in…",57,[[["p"]],[["url"],["result",["url"]]]]],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL…",57,[[["p"]],[["url"],["result",["url"]]]]],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,…",57,[[["self"]],[["pathbuf"],["result",["pathbuf"]]]]]],"p":[[4,"ParseError"],[3,"TemporalOptions"],[3,"Compact"],[3,"RegisteredClaims"],[3,"ClaimPresenceOptions"],[3,"ValidationOptions"],[3,"ClaimsSet"],[4,"Presence"],[4,"Validation"],[4,"SingleOrMultiple"],[4,"StringOrUri"],[4,"Error"],[13,"WrongKeyType"],[13,"WrongEncryptionOptions"],[4,"DecodeError"],[13,"PartsLengthError"],[4,"ValidationError"],[8,"SecureRandom"],[3,"EncryptionResult"],[4,"EncryptionOptions"],[13,"AES_GCM"],[4,"Algorithm"],[4,"SignatureAlgorithm"],[4,"KeyManagementAlgorithm"],[4,"KeyManagementAlgorithmType"],[4,"ContentEncryptionAlgorithm"],[3,"RegisteredHeader"],[3,"CekAlgorithmHeader"],[3,"Header"],[4,"CompressionAlgorithm"],[4,"Compact"],[13,"Decrypted"],[3,"CommonParameters"],[3,"EllipticCurveKeyParameters"],[3,"RSAKeyParameters"],[3,"OtherPrimesInfo"],[3,"OctetKeyParameters"],[3,"OctetKeyPairParameters"],[3,"JWK"],[3,"JWKSet"],[4,"KeyType"],[4,"PublicKeyUse"],[4,"KeyOperations"],[4,"AlgorithmParameters"],[4,"EllipticCurveKeyType"],[4,"RSAKeyType"],[4,"OctetKeyType"],[4,"OctetKeyPairType"],[4,"EllipticCurve"],[3,"Header"],[3,"RegisteredHeader"],[4,"Compact"],[13,"Decoded"],[4,"Secret"],[13,"RSAModulusExponent"],[8,"CompactPart"],[3,"Base64Url"],[3,"Url"],[3,"Empty"],[3,"Timestamp"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);